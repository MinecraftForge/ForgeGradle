plugins {
    id 'java-gradle-plugin'
    id 'eclipse'
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.5.0'
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'com.github.ben-manes.versions' version '0.36.0'
  //id 'com.github.johnrengelman.shadow' version '2.0.4'
}

version = (grgit.describe(longDescr: true, tags: true) ?: 'unknown-unknown-unknown').split('-').with { "${it[0]}.${it[1]}" }
println('Version: ' + version + ' Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    common
    mcp
    patcher
    userdev
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

configurations {
    all {
        exclude group: 'org.ow2.asm'
    }
    mcpImplementation.extendsFrom commonImplementation
    patcherImplementation.extendsFrom commonImplementation
    userdevImplementation.extendsFrom mcpImplementation
    implementation.extendsFrom mcpImplementation, patcherImplementation, userdevImplementation
}

jar {
    from sourceSets.common.output
    from sourceSets.mcp.output
    from sourceSets.patcher.output
    from sourceSets.userdev.output
}

task sourcesJar(type: Jar) {
    from sourceSets.common.allJava
    from sourceSets.mcp.allJava
    from sourceSets.patcher.allJava
    from sourceSets.userdev.allJava
    archiveClassifier = 'sources'
}

repositories {
	mavenLocal()
    jcenter()
    maven { url = 'https://files.minecraftforge.net/maven' }
	maven { url = 'https://repo.gradle.org/gradle/libs-releases-local/' }
}

license {
    header = file('HEADER')
    ext {
        name = 'ForgeGradle'
        year = 2018
        fullname = 'Forge Development LLC'
    }
    exclude '**/*.properties'
    exclude 'net/minecraftforge/gradle/common/diff/'
    exclude 'net/minecraftforge/gradle/common/util/JavaVersionParser.java'
}

gradlePlugin {
    plugins {
        mcp0 {
            id = 'net.minecraftforge.gradle.forgedev.mcp'
            implementationClass = 'net.minecraftforge.gradle.mcp.MCPPlugin'
        }

        mcp1 {
            id = 'net.minecraftforge.gradle.mcp'
            implementationClass = 'net.minecraftforge.gradle.mcp.MCPPlugin'
        }

        patcher0 {
            id = 'net.minecraftforge.gradle.forgedev.patcher'
            implementationClass = 'net.minecraftforge.gradle.patcher.PatcherPlugin'
        }

        patcher1 {
            id = 'net.minecraftforge.gradle.forgedev'
            implementationClass = 'net.minecraftforge.gradle.patcher.PatcherPlugin'
        }

        patcher2 {
            id = 'net.minecraftforge.gradle.patcher'
            implementationClass = 'net.minecraftforge.gradle.patcher.PatcherPlugin'
        }

        userdev {
            id = 'net.minecraftforge.gradle'
            implementationClass = 'net.minecraftforge.gradle.userdev.UserDevPlugin'
        }
    }
}

wrapper {
    gradleVersion = '6.8'
    distributionType = Wrapper.DistributionType.ALL
}

dependencies {
    commonImplementation gradleApi()
    commonImplementation 'com.cloudbees:diff4j:1.3'
    commonImplementation 'commons-io:commons-io:2.8.0'
    commonImplementation 'com.github.jponge:lzma-java:1.3' // replaces the LZMA binary
    commonImplementation 'com.nothome:javaxdelta:2.0.1' // GDIFF implementation for BinPatches
    commonImplementation 'com.google.code.gson:gson:2.8.6'
    commonImplementation 'com.google.guava:guava:30.1-jre'
    commonImplementation 'de.siegmar:fastcsv:2.0.0'
    commonImplementation 'net.minecraftforge:artifactural:2.0.3'
    commonImplementation 'org.apache.maven:maven-artifact:3.6.3'
    commonImplementation 'org.apache.httpcomponents:httpclient:4.5.13'
    commonImplementation 'net.minecraftforge:srgutils:0.2.13'

    mcpImplementation sourceSets.common.output
    patcherImplementation sourceSets.mcp.output
    patcherImplementation sourceSets.common.output
    userdevImplementation sourceSets.mcp.output
    userdevImplementation sourceSets.common.output
}

//Gradle doesn't add it's own source when doing the API. So lets hack it in!
import org.gradle.plugins.ide.eclipse.model.*
import org.gradle.plugins.ide.eclipse.model.internal.*
project.extensions.eclipse.classpath.file.whenMerged { Classpath cp ->
    def gradleSrc = gradle.gradleHomeDir.absolutePath.replace(File.separator, '/') + '/src/'
    cp.entries.each { entry ->
        if ((entry in AbstractLibrary) && entry.library.file.name.startsWith('gradle-')) {
            def type = (entry.library.file.name =~ "^gradle(-(.*))?-(${gradle.gradleVersion})")[0][2]
            if (type == 'api') type = 'core-api' //Gradle name is different for cores
            if (type == '') type = 'core'
            entry.sourcePath = new FileReferenceFactory().fromPath(gradleSrc + type)
        }
    }
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            if (project.hasProperty('forgeMavenPassword')) {
                credentials {
                    username project.properties.forgeMavenUser
                    password project.properties.forgeMavenPassword
                }
                url 'https://files.minecraftforge.net/maven/manage/upload'
            } else {
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}